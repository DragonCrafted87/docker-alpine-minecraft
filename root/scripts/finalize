#!/usr/bin/python3

# System Imports
import distutils.log
from distutils.dir_util import copy_tree
from logging import ERROR
from logging import INFO
from os import chdir
from os import close as os_close
from os import fdopen
from os import pipe as os_pipe
from os import remove
from pathlib import Path
from pathlib import PurePath
from signal import SIGABRT
from signal import SIGINT
from signal import signal
from signal import SIGTERM
from subprocess import PIPE
from subprocess import Popen
from threading import Thread
from time import sleep

# Local Imports
from includes.python_logger import create_logger

RAM_DRIVE = '/mnt/ramdisk/'
NFS_DRIVE = '/mnt/minecraft/'

class LogPipe(Thread):

    def __init__(self, base_logger, level):
        """Setup the object with a logger and a loglevel
        and start the thread
        """
        Thread.__init__(self)
        self.daemon = False
        self.level = level
        self.fdRead, self.fdWrite = os_pipe()
        self.pipeReader = fdopen(self.fdRead)
        self.base_logger = base_logger
        self.last_logged_line = ''
        self.start()

    def fileno(self):
        """Return the write file descriptor of the pipe
        """
        return self.fdWrite

    def run(self):
        """Run the thread, logging everything.
        """
        for line in iter(self.pipeReader.readline, ''):
            self.last_logged_line = line.strip('\n')
            self.base_logger.log(self.level, line.strip('\n'))

        self.pipeReader.close()

    def close(self):
        """Close the write end of the pipe.
        """
        os_close(self.fdWrite)


LOGGER = create_logger(PurePath(__file__).stem)
LOGINFO = LogPipe(LOGGER, INFO)
LOGERR = LogPipe(LOGGER, ERROR)

LOGGER.setLevel(INFO)
distutils.log = LOGGER

CHILD_PROCESS_LIST = []

def sync_copy(ram_to_data_store=True):
    try:
        if ram_to_data_store:
            copy_tree(
              RAM_DRIVE,
              NFS_DRIVE,
              update=1,
            )
        else:
            copy_tree(
              NFS_DRIVE,
              RAM_DRIVE,
              update=1,
            )
    except Exception:
        pass

def save(process):
    if process.poll() is None:
        process.stdin.write(b'save-off\n')
        process.stdin.flush()
        process.stdin.write(b'save-all\n')
        process.stdin.flush()

        counter = 0
        while (not LOGINFO.last_logged_line.endswith('Saved the game') and
               not LOGINFO.last_logged_line.endswith('RCON Listener stopped') and
               counter < 90):
            sleep(1)
            counter = counter + 1

        sync_copy()

        process.stdin.write(b'save-on\n')
        process.stdin.flush()

def save_and_exit():
    LOGGER.info('Starting Final Sync')
    for process in CHILD_PROCESS_LIST:
        if process.poll() is None:
            process.stdin.write(b'stop\n')
            process.stdin.flush()

            counter = 0
            while (not LOGINFO.last_logged_line.endswith('RCON Listener stopped') and
                   counter < 30):
                sleep(1)
                counter = counter + 1

    sync_copy()
    LOGGER.info('Finished Final Sync')

    LOGINFO.close()
    LOGERR.close()

    raise SystemExit('Exiting')

def signal_handler(sig, frame):
    save_and_exit()


def main():
    signal(SIGINT, signal_handler)
    signal(SIGABRT, signal_handler)
    signal(SIGTERM, signal_handler)

    fabric_installer = Path('/mnt/minecraft/fabric-installer.jar')
    if fabric_installer.is_file() :
        chdir(NFS_DRIVE)
        start_server_script = 'java -jar fabric-installer.jar server -downloadMinecraft'
        minecraft = Popen(start_server_script, shell=True, stdout=LOGINFO, stderr=LOGERR)
        minecraft.wait()
        remove('fabric-installer.jar')

    sync_copy(ram_to_data_store=False)

    chdir(RAM_DRIVE)
    start_server_script = ['/usr/bin/java',
        '-Xms4G',
        '-Xmx4G',
        '-XX:+UseG1GC',
        '-XX:+ParallelRefProcEnabled',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+DisableExplicitGC',
        '-XX:+AlwaysPreTouch',
        '-XX:G1NewSizePercent=30',
        '-XX:G1MaxNewSizePercent=40',
        '-XX:G1HeapRegionSize=8M',
        '-XX:G1ReservePercent=20',
        '-XX:G1HeapWastePercent=5',
        '-XX:G1MixedGCCountTarget=4',
        '-XX:InitiatingHeapOccupancyPercent=15',
        '-XX:G1MixedGCLiveThresholdPercent=90',
        '-XX:G1RSetUpdatingPauseTimePercent=5',
        '-XX:SurvivorRatio=32',
        '-XX:+PerfDisableSharedMem',
        '-XX:MaxTenuringThreshold=1',
        '-Dusing.aikars.flags=https://mcflags.emc.gs',
        '-Daikars.new.flags=true',
        '-jar', f'{RAM_DRIVE}fabric-server-launch.jar',
        'nogui']

    minecraft = Popen(start_server_script, stdin=PIPE, stdout=LOGINFO, stderr=LOGERR)
    CHILD_PROCESS_LIST.append(minecraft)

    # wait to finish booting
    while not LOGINFO.last_logged_line.endswith('RCON running on 0.0.0.0:25575'):
        sleep(1)

    counter = 0
    while minecraft.poll() is None:
        if counter > 300:
            save(minecraft)
            counter = 0
        else:
            counter = counter + 1

        sleep(1)

    save_and_exit()

if __name__ == "__main__":
    main()
